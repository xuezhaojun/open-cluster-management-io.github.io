<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>User Scenarios on Open Cluster Management</title>
    <link>https://open-cluster-management.io/scenarios/</link>
    <description>Recent content in User Scenarios on Open Cluster Management</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://open-cluster-management.io/scenarios/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deploy Kubernetes resources to the managed clusters</title>
      <link>https://open-cluster-management.io/scenarios/deploy-kubernetes-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://open-cluster-management.io/scenarios/deploy-kubernetes-resources/</guid>
      <description>After bootstrapping an OCM environment of at least one managed clusters, now it&amp;rsquo;s time to begin your first journey of deploying Kubernetes resources into your managed clusters with OCM&amp;rsquo;s ManifestWork API.
Prerequisites Before we get start with the following tutorial, let&amp;rsquo;s clarify a few terms we&amp;rsquo;re going to use in the context.
  Cluster namespace: After a managed cluster is successfully registered into the hub. The hub registration controller will be automatically provisioning a cluster namespace dedicated for the cluster of which the name will be same as the managed cluster.</description>
    </item>
    
    <item>
      <title>Distribute workload with placement selected managed clusters</title>
      <link>https://open-cluster-management.io/scenarios/distribute-workload-with-placement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://open-cluster-management.io/scenarios/distribute-workload-with-placement/</guid>
      <description>The Placement API is used to dynamically select a set of ManagedCluster in one or multiple ManagedClusterSets so that the workloads can be deployed to these clusters.
If you define a valid Placement, the placement controller generates a corresponding PlacementDecision with the selected clusters listed in the status. As an end-user, you can parse the selected clusters and then operate on the target clusters. You can also integrate a high-level workload orchestrator with the PlacementDecision to leverage its scheduling capabilities.</description>
    </item>
    
    <item>
      <title>Extend the multicluster scheduling capabilities with placement</title>
      <link>https://open-cluster-management.io/scenarios/extend-multicluster-scheduling-capabilities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://open-cluster-management.io/scenarios/extend-multicluster-scheduling-capabilities/</guid>
      <description>The Placement API is used to dynamically select a set of ManagedCluster in one or multiple ManagedClusterSets so that the workloads can be deployed to these clusters. You can use placement to filter clusters by label or claim selector, also placement provides some default prioritizers which can be used to sort and select the most suitable clusters.
One of the default prioritizers are ResourceAllocatableCPU and ResourceAllocatableMemory. They provide the capability to sort clusters based on the allocatable CPU and memory.</description>
    </item>
    
    <item>
      <title>Extending managed clusters with custom attributes</title>
      <link>https://open-cluster-management.io/scenarios/extending-managed-clusters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://open-cluster-management.io/scenarios/extending-managed-clusters/</guid>
      <description>Under some cases we need a convenient way to extend OCM&amp;rsquo;s Managed Cluster data model so that our own custom multi-cluster system can easily work over the OCM&amp;rsquo;s native cluster api otherwise we will have to maintain an additional Kubernetes&amp;rsquo; CustomResourceDefinition in the project. OCM definitely supports developers to decorate the cluster api with minimal effort, and in the following content we will walk through that briefly.
The original cluster model in OCM &amp;ldquo;Managed Cluster&amp;rdquo; is designed to be a neat and light-weight placeholder resource of which the spec doesn&amp;rsquo;t require any additional information other than &amp;ldquo;whether the cluster is accepted or not&amp;rdquo; i.</description>
    </item>
    
    <item>
      <title>Integration with Argo CD</title>
      <link>https://open-cluster-management.io/scenarios/integration-with-argocd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://open-cluster-management.io/scenarios/integration-with-argocd/</guid>
      <description>Argo CD is a declarative, GitOps continuous delivery tool, which allows developers to define and control deployment of Kubernetes application resources from within their existing Git workflow. By integrating Open Cluster Management (OCM) with Argo CD, it enables both automation and greater flexibility managing Argo CD Applications across a large number of OCM managed clusters.
In this article, we want to show you how to integrate Argo CD with OCM and deploy application to OCM managed clusters by leveraging the Placement API, which supports multi-cluster scheduling.</description>
    </item>
    
    <item>
      <title>Manage a cluster with multiple hubs</title>
      <link>https://open-cluster-management.io/scenarios/manage-cluster-with-multiple-hubs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://open-cluster-management.io/scenarios/manage-cluster-with-multiple-hubs/</guid>
      <description>Normally an Open Cluster Management (OCM) hub manages multiple managed clusters and a cluster only registers to one OCM hub. While there might be some user scenarios, where a single cluster may want to join more than one OCM hub as a managed cluster, including:
 In an organization, each department may setup an OCM hub to manage clusters owned by this department, and all clusters are managed by a central OCM hub owned by IT department to enforce organization wide security policies.</description>
    </item>
    
    <item>
      <title>Migrate workload with placement</title>
      <link>https://open-cluster-management.io/scenarios/migrate-workload-with-placement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://open-cluster-management.io/scenarios/migrate-workload-with-placement/</guid>
      <description>The Placement API is used to dynamically select a set of ManagedCluster in one or multiple ManagedClusterSets so that the workloads can be deployed to these clusters.
If you define a valid Placement, the placement controller generates a corresponding PlacementDecision with the selected clusters listed in the status. As an end-user, you can parse the selected clusters and then operate on the target clusters. You can also integrate a high-level workload orchestrator with the PlacementDecision to leverage its scheduling capabilities.</description>
    </item>
    
    <item>
      <title>Pushing Kubernetes API requests to the managed clusters</title>
      <link>https://open-cluster-management.io/scenarios/pushing-kube-api-requests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://open-cluster-management.io/scenarios/pushing-kube-api-requests/</guid>
      <description>By following the instructions in this document, an OCM hub admin will be able to &amp;ldquo;push&amp;rdquo; Kubernetes API requests to the managed clusters. The benefit of using this method for &amp;ldquo;pushing&amp;rdquo; requests in OCM is that we don&amp;rsquo;t need to explicitly configure any API endpoint for the managed clusters or provide any client credentials as preparation. We just need to enable/install the following OCM addons:
 Cluster-Proxy: Setting up the konnectivity tunnels between the hub cluster and the managed clusters so the hub cluster can connect/access the managed cluster from anywhere.</description>
    </item>
    
    <item>
      <title>Register a cluster to hub through proxy server</title>
      <link>https://open-cluster-management.io/scenarios/register-cluster-through-proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://open-cluster-management.io/scenarios/register-cluster-through-proxy/</guid>
      <description>When registering a cluster to an Open Cluster Management (OCM) hub, there is a network requirement for the managed cluster. It must be able to reach the hub cluster. Sometimes the managed cluster cannot directly connect to the hub cluster. For example, the hub cluster is in a public cloud, and the managed cluster is in a private cloud environment behind firewalls. The communications out of the private cloud can only go through a HTTP or HTTPS proxy server.</description>
    </item>
    
  </channel>
</rss>